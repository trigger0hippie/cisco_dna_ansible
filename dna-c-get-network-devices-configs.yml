# edited to work with Ansible Tower AWX
---
- hosts: all
  connection: local
  gather_facts: false 
  tasks:
  - name: Get network devices
    cisco.dnac.network_device_info:
      dnac_host: "{{ inventory_hostname }}"
      dnac_username: "{{ dnac_username }}"
      dnac_password: "{{ dnac_password }}"
      dnac_verify: "{{ dnac_verify }}"
    register: network_devices
  - name: Get device list ids  
    ansible.builtin.set_fact:
      device_id_list: "{{ device_id_list | default([]) }} + ['{{ item.id }}']"
      device_ip_list: "{{ device_ip_list | default([]) }} + ['{{ item.managementIpAddress }}']"
    with_items: "{{ network_devices.dnac_response.response }}"
    when:
      - network_devices.dnac_response is defined
      - network_devices.dnac_response.response is defined
    no_log: true
  - name: Get Device configuration
    cisco.dnac.network_device_config_info:
      dnac_host: "{{ inventory_hostname }}"
      dnac_username: "{{ dnac_username }}"
      dnac_password: "{{ dnac_password }}"
      dnac_verify: "{{ dnac_verify }}"
      networkDeviceId: "{{ item }}"
    register: device_conf
    with_items:
      "{{ device_id_list }}"
    no_log: true
  - name: Generate configs list pairs
    ansible.builtin.set_fact:
      device_config_list_of_dicts: "{{ device_config_list_of_dicts | default([]) + [{'device_hostname': item.1.hostname, 'device_ip': item.1.managementIpAddress, 'config': item.0.dnac_response.response }] }}"
    with_nested: 
      - "{{ device_conf.results }}"
      - "{{ network_devices.dnac_response.response }}"
    when:
      - (item.0.item == item.1.id)
  - name: Save all to .txt file
    copy:
      content: "{{ item.config }}"
      dest: /awx-output-folder/{{ item.device_hostname }}-{{ item.device_ip }}-config.txt
    with_items:
      - "{{ device_config_list_of_dicts }}"
      
